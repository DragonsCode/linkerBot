from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import IsReplyFilter, IDFilter
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from random import choice
import sqlite3
import asyncio
import json
import requests
import logging
#import nest_asyncio
#nest_asyncio.apply()


V = 1
VK_ID = 215268409
TOKEN = "a469a4784e9eb78bd15479c964fba70a2220a377309763864a"
ADMIN = 5161665132
#ADMIN = 235519518

logging.basicConfig(level=logging.INFO)
bot = Bot(token='5379912413:AAHU1vDeTtZMBMU4-DUoK2elDDGR9_tilCs', parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

purch = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data='buy'))

tariffs = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ', callback_data='simple'), InlineKeyboardButton('–ü—Ä–µ–º–∏—É–º –≤–∏–¥–µ–æ', callback_data='premium'))

buy = InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url='https://vk.com/club215268409?w=app6887721_-215268409'), InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='check'), InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel'))

class keksik:
    def __init__(self, group, token, v, headers = {'Content-type': 'application/json'}):
        self.group = group
        self.token = token
        self.v = v
        self.headers = headers
    def req(self, method, params = {}):
        r = requests.post("https://api.keksik.io/"+method, json=params, headers=self.headers)
        out = json.loads(r.text)
        return out
    def history(self, len = 20):
        r = requests.post("https://api.keksik.io/donates/get", json={'group': self.group, 'token': self.token, 'v': self.v}, headers=self.headers)
        out = json.loads(r.text)
        print(out)
        return out
    def find(self, msg, price):
        lst = self.history().get('list')
        print(lst)
        finded = False
        for i in lst:
            if i.get('msg') == msg and i.get('amount') == str(price):
                finded = True
                break
        return finded

keks = keksik(VK_ID, TOKEN, V)
#print(keks.find('g', 10))

def get_type(callback_query):
    entities = callback_query.message.entities or callback_query.message.caption_entities
    if not entities or entities[-1].type != "hashtag":
        return None, "No hashtags found"
    hashtag = entities[-1].get_text(callback_query.message.text or callback_query.message.caption)
    return hashtag[1:], None

def db():
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS db (user INTEGER, simple INTEGER DEFAULT 1, premium INTEGER DEFAULT 1, msg TEXT DEFAULT "No", msg_premium TEXT DEFAULT "No")')
    cur.execute('CREATE TABLE IF NOT EXISTS links (link TEXT, tariff TEXT)')
    con.commit()
    con.close()

def generate():
    digits = '0123456789'
    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lowercase = 'abcdefghijklmnopqrstuvwxyz' 
    #punctuation = '!#$%&*+-=?@^_' 
    ally = digits + uppercase + lowercase
    chars = ''
    for i in range(20):
        chars += choice(ally)
    return chars

async def wait(*args, **kwargs):
    call=args[0]
    await bot.send_message(call.from_user.id, "–ù–µ —Å–ø–∞–º—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ :(")


@dp.callback_query_handler(Text(equals='simple'))
async def simple(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    #await bot.answer_callback_query(call.id)
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    type = 'simple'
    tries =  cur.execute('SELECT simple FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
    links = cur.execute('SELECT link FROM links WHERE tariff = ?', (type,)).fetchall()
    print(tries, links, type)
    if tries[0] > len(links):
        await bot.send_message(call.from_user.id, "–í—ã –∫—É–ø–∏–ª–∏ —É–∂–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ!")
        return
    available = len(links) - tries[0] +1
    data = cur.execute('SELECT simple FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
    print(data)
    price = 10*data[0]
    msg = generate()
    cur.execute('UPDATE db SET msg = ? WHERE user = ?', (msg, call.from_user.id,))
    con.commit()
    con.close()
    await bot.send_message(call.from_user.id, f"‚≠êÔ∏è–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –∏ –æ–ø–ª–∞—Ç–∏ {price} —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –í–ö —Å —Ç–∞–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: <code>{msg}</code>\n\n‚ö°Ô∏è–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ —Å–∫–∞–∑–∞–Ω–æ, –Ω–µ –º–µ–Ω—å—à–µ –∏ –Ω–µ –±–æ–ª—å—à–µ! –ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –¥—Ä—É–≥—É—é –æ–ø–ª–∞—Ç—É, —Ç–æ —ç—Ç–∞ –æ–ø–ª–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∏ —Å—Å—ã–ª–∫—É —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å!\n\n‚ú®–û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ: {available}\nüïõ–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã\n\n#simple", reply_markup=buy)

@dp.callback_query_handler(Text(equals='premium'))
async def premium(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    #await bot.answer_callback_query(call.id)
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    type = 'premium'
    tries =  cur.execute('SELECT premium FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
    links = cur.execute('SELECT link FROM links WHERE tariff = ?', (type,)).fetchall()
    if tries[0] > len(links):
        await bot.send_message(call.from_user.id, "–í—ã –∫—É–ø–∏–ª–∏ —É–∂–µ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ!")
        return
    available = len(links) - tries[0] + 1
    data = cur.execute('SELECT premium FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
    print(data)
    price = 50*data[0]
    msg = generate()
    cur.execute('UPDATE db SET msg_premium = ? WHERE user = ?', (msg, call.from_user.id,))
    con.commit()
    con.close()
    
    await bot.send_message(call.from_user.id, f"‚≠êÔ∏è–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –∏ –æ–ø–ª–∞—Ç–∏ {price} —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –í–ö —Å —Ç–∞–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: <code>{msg}</code>\n\n‚ö°Ô∏è–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ —Å–∫–æ–ª—å–∫–æ —Å–∫–∞–∑–∞–Ω–æ, –Ω–µ –º–µ–Ω—å—à–µ –∏ –Ω–µ –±–æ–ª—å—à–µ! –ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –¥—Ä—É–≥—É—é –æ–ø–ª–∞—Ç—É, —Ç–æ —ç—Ç–∞ –æ–ø–ª–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∏ —Å—Å—ã–ª–∫—É —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å!\n\n‚ú®–û—Å—Ç–∞–ª–æ—Å—å –≤–∏–¥–µ–æ: {available}\nüïõ–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 5 —á–∞—Å–æ–≤\n\n#premium", reply_markup=buy)

@dp.message_handler(IDFilter(chat_id=ADMIN), commands="add")
async def add(message: types.Message):
    try:
        message.text.split(' ')[2]
    except IndexError:
        await message.reply("–ü–µ—Ä–µ–¥–∞–≤–∞–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /add –°–°–´–õ–ö–ê –¢–ê–†–ò–§")
        return
    link = message.text.split(' ')[1]
    tariff = message.text.split(' ')[2]
    tariffs = ['simple', 'premium']
    if tariff not in tariffs:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —É–∫–∞–∑—ã–≤–∞–π simple –∏–ª–∏ premium")
        return
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    cur.execute('INSERT INTO links VALUES (?, ?)', (link, tariff))
    con.commit()
    con.close()
    await message.reply("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@dp.message_handler(IDFilter(chat_id=ADMIN), commands="del")
async def delete(message: types.Message):
    try:
        message.text.split(' ')[1]
    except IndexError:
        await message.reply("–ü–µ—Ä–µ–¥–∞–≤–∞–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /del –°–°–´–õ–ö–ê")
        return
    link = message.text.split(' ')[1]
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    data = cur.execute('SELECT link FROM links').fetchall()
    print(data)
    there = False
    for i in data:
        if i[0] == link:
            there = True
    if not there:
        await message.reply("–ù–µ—Ç—É —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–∏")
        return
    cur.execute('DELETE FROM links WHERE link=?', (link,))
    con.commit()
    con.close()
    await message.reply('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–¥–µ–Ω–æ!')

@dp.message_handler(IDFilter(chat_id=ADMIN), commands="show")
async def show(message: types.Message):
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    data = cur.execute('SELECT link, tariff FROM links').fetchall()
    text = '–í—Å–µ —Å—Å—ã–ª–∫–∏:\n\n'
    print(data)
    for index, item in enumerate(data, 1):
        text += f'{index}. {item[0]} - {item[1]}\n'
    await message.reply(text)

@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    async with state.proxy():
        data['clicked'] = 0
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    data = cur.execute('SELECT user FROM db WHERE user = ?', (message.from_user.id,)).fetchall()
    if not data:
        cur.execute('INSERT INTO db VALUES (?, ?, ?, ?, ?)', (message.from_user.id, 1, 1, "No", "No",))
        con.commit()
    con.close()
    pic = open('start.jpg', 'rb')
    #pic2 = open('menu.jpg', 'rb')
    await bot.send_photo(message.from_user.id, caption='–ü—Ä–∏–≤–µ—Ç –∑–∞–π—á–∏–∫üíã\n\n–•–æ—á–µ—à—å –ø–æ–≥–ª–∞–∑–µ—Ç—å –Ω–∞ –º–µ–Ω—è? üôà\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫—É–ø–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–æ—Ç 10—Ä)üî• –∏–ª–∏ –ø—Ä–µ–º–∏—É–º (–æ—Ç 50—Ä)üëë', photo=pic, reply_markup=purch)
    #await bot.send_photo(message.from_user.id, caption='–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?', photo=pic2, reply_markup=tariffs)
    pic.close()
    #pic2.close()

@dp.callback_query_handler(Text(equals='buy'))
async def menu(call: types.CallbackQuery, state: FSMContext):
    #await bot.answer_callback_query(call.id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    pic = open('menu.jpg', 'rb')
    await bot.send_photo(call.from_user.id, caption='–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?', photo=pic, reply_markup=tariffs)
    pic.close()

@dp.callback_query_handler(Text(equals='cancel'))
async def cancel(call: types.CallbackQuery, state: FSMContext):
    #await bot.delete_message(call.from_user.id, call.message.message_id)
    #await bot.answer_callback_query(call.id)
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    type = get_type(call)[0]
    print(type)
    if type == 'premium':
        cur.execute('UPDATE db SET msg_premium = ? WHERE user = ?', ("No", call.from_user.id,))
        con.commit()
    elif type == 'simple':
        cur.execute('UPDATE db SET msg = ? WHERE user = ?', ("No", call.from_user.id,))
        con.commit()
    con.close()
    await menu(call, state)
    #await bot.send_message(call.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")


@dp.callback_query_handler(Text(equals='check'))
async def check(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['clicked'] += 1
        if data['clicked'] >2:
            data['clicked'] = 0
            await bot.send_message(call.from_user.id, "–ê–Ω—Ç–∏—Å–ø–∞–º: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —è —Å–∞–º —Å–æ–æ–±—â—É")
            await asyncio.sleep(300)
            await bot.send_message(call.from_user.id, "5 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–ø–ª–∞—Ç—É")
            return
    #await bot.delete_message(call.from_user.id, call.message.message_id)
    #await bot.answer_callback_query(call.id)
    con = sqlite3.connect('ref.db')
    cur = con.cursor()
    type = get_type(call)[0]
    msg = ''
    price = 0
    tries = 0
    if type == 'premium':
        data = cur.execute('SELECT premium, msg_premium FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
        print(data)
        msg = data[1]
        price = 50*data[0]
        tries = data[0]
    elif type == 'simple':
        data = cur.execute('SELECT simple, msg FROM db WHERE user = ?', (call.from_user.id,)).fetchone()
        print(data)
        msg = data[1]
        price = 10*data[0]
        tries = data[0]
    con.commit()
    con.close()
    print(type, msg, price, tries)
    if msg == "No":
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, "–≠—Ç–∞ –æ–ø–ª–∞—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –ø—Ä–∏—á–∏–Ω–æ–π –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –¥—Ä—É–≥—É—é –æ–ø–ª–∞—Ç—É")
        return
    purchuased = keks.find(msg, price)
    if not purchuased:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        if "üòî–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã!" not in call.message.text:
            await bot.send_message(call.from_user.id, "üòî–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã!\n\n"+call.message.text, reply_markup=buy)
        else:
            await bot.send_message(call.from_user.id, call.message.text, reply_markup=buy)
        return
    else:
        con = sqlite3.connect('ref.db')
        cur = con.cursor()
        data = cur.execute('SELECT link FROM links WHERE tariff = ?', (type,)).fetchall()
        print(data)
        try:
            #await bot.delete_message(call.from_user.id, call.message.message_id)
            await bot.send_message(call.from_user.id, "‚ù§Ô∏è–î–µ—Ä–∂–∏ —Å–≤–æ—é —Å—Å—ã–ª–æ—á–∫—É ‚Äî "+data[tries-1][0])
            if type == 'premium':
                cur.execute('UPDATE db SET premium = ?, msg_premium = "No" WHERE user = ?', (tries+1, call.from_user.id,))
            elif type == 'simple':
                cur.execute('UPDATE db SET simple = ?, msg = "No" WHERE user = ?', (tries+1, call.from_user.id,))
        except IndexError:
            #await bot.delete_message(call.from_user.id, call.message.message_id)
            await bot.send_message(call.from_user.id, "–¢—ã –∫—É–ø–∏–ª –≤—Å–µ —Å—Å—ã–ª–∫–∏ :/")
        con.commit()
        con.close()
        await menu(call, state)

if __name__ == "__main__":
    db()
    executor.start_polling(dp, skip_updates=True)